---
export interface Props {
  title: string;
  description: string;
  image?: string;
  type?: 'website' | 'article';
  publishedTime?: string;
  modifiedTime?: string;
  author?: string;
  section?: string;
  tags?: string[];
  canonical?: string;
}

const {
  title,
  description,
  image = '/images/og-default.jpg',
  type = 'website',
  publishedTime,
  modifiedTime,
  author,
  section,
  tags = [],
  canonical
} = Astro.props;

const canonicalURL = canonical || (Astro.site ? new URL(Astro.url.pathname, Astro.site) : Astro.url.pathname);
const imageURL = Astro.site && image ? new URL(image, Astro.site) : image;
---

<!-- Primary Meta Tags -->
<title>{title}</title>
<meta name="title" content={title} />
<meta name="description" content={description} />
<link rel="canonical" href={canonicalURL} />

<!-- Open Graph / Facebook -->
<meta property="og:type" content={type} />
<meta property="og:url" content={canonicalURL} />
<meta property="og:title" content={title} />
<meta property="og:description" content={description} />
<meta property="og:image" content={imageURL} />
<meta property="og:site_name" content="Community Observer" />

<!-- Twitter -->
<meta property="twitter:card" content="summary_large_image" />
<meta property="twitter:url" content={canonicalURL} />
<meta property="twitter:title" content={title} />
<meta property="twitter:description" content={description} />
<meta property="twitter:image" content={imageURL} />

<!-- Article specific meta tags -->
{type === 'article' && (
  <>
    {publishedTime && <meta property="article:published_time" content={publishedTime} />}
    {modifiedTime && <meta property="article:modified_time" content={modifiedTime} />}
    {author && <meta property="article:author" content={author} />}
    {section && <meta property="article:section" content={section} />}
    {tags.map(tag => <meta property="article:tag" content={tag} />)}
  </>
)}

<!-- Structured Data -->
<script type="application/ld+json" set:html={JSON.stringify({
  "@context": "https://schema.org",
  "@type": type === 'article' ? 'NewsArticle' : 'Organization',
  ...(type === 'article' ? {
    headline: title,
    description: description,
    image: imageURL,
    datePublished: publishedTime,
    dateModified: modifiedTime || publishedTime,
    author: {
      "@type": "Person",
      name: author || "Community Observer Staff"
    },
    publisher: {
      "@type": "Organization",
      name: "Community Observer",
      logo: {
        "@type": "ImageObject",
        url: Astro.site ? new URL('/images/logo.jpg', Astro.site) : '/images/logo.jpg'
      }
    }
  } : {
    name: "Community Observer",
    description: "Your local community newspaper delivering news, events, and stories that matter to your neighborhood.",
    url: Astro.site || '/',
    logo: Astro.site ? new URL('/images/logo.jpg', Astro.site) : '/images/logo.jpg',
    sameAs: []
  })
})} />

